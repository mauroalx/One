from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.models import User, Role, UserStatus
from datetime import datetime
import bcrypt

ADMIN_ROLE_NAME = "Admin"
ADMIN_USER_EMAIL = "admin@one.local"

async def bootstrap(db: AsyncSession):
    print("üîß Bootstrap iniciado")

    # Verifica se a role admin j√° existe
    print("üîç Verificando se a role Admin j√° existe...")
    result = await db.execute(select(Role).where(Role.name == ADMIN_ROLE_NAME))
    role = result.scalars().first()

    if role:
        print("‚úÖ Role Admin j√° existe:", role.id)
    else:
        print("‚ûï Criando role Admin...")
        role = Role(
            name=ADMIN_ROLE_NAME,
            description="Administrador do sistema",
            permissions={
                "geral": {"*": True},
            }
        )
        db.add(role)
        await db.commit()
        await db.refresh(role)
        print("‚úÖ Role Admin criada com ID:", role.id)

    # Verifica se o usu√°rio admin j√° existe
    print("üîç Verificando se o usu√°rio admin@one.local j√° existe...")
    result = await db.execute(select(User).where(User.email == ADMIN_USER_EMAIL))
    user = result.scalars().first()

    if user:
        print("‚úÖ Usu√°rio Admin j√° existe:", user.id)
    else:
        print("‚ûï Criando usu√°rio Admin...")
        hashed_pw = bcrypt.hashpw("admin123".encode(), bcrypt.gensalt()).decode()
        user = User(
            name="Administrador",
            email=ADMIN_USER_EMAIL,
            description="Usu√°rio master do sistema",
            password=hashed_pw,
            status=UserStatus.enabled,
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow(),
            role_id=role.id
        )
        db.add(user)
        await db.commit()
        await db.refresh(user)
        print("‚úÖ Usu√°rio Admin criado com ID:", user.id)

    print("‚úÖ Bootstrap finalizado com sucesso")
